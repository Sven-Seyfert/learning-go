----------------------------------------
Installation
----------------------------------------
- download
- installation
- new cmd > "go version" to check installation
- vscode > extensions > "Go" (from "Go Team at Google")
- command palatte > "Go: Install/Update Tools"
    - select all > ok > wait for successfully installation (output)

----------------------------------------
Getting startet
----------------------------------------
- create main.go
- add mod file "go mod init <myAppName>"

----------------------------------------
Build
----------------------------------------
- build to executable
    - windows: "go build -o build/firstExecutable.exe main.go"
    - others: "go build -o build/firstExecutable main.go"
    - OS specific
        - windows > GOOS=windows go build > ls > Output: "app.exe"
        - file app.exe > app.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows
        - windows > GOOS=linux GOARCH=ppc64 go build > ls > Output: "app"
        - file app > app: ELF 64-bit MSB executable, 64-bit PowerPC or cisco 7500, version 1 (SYSV), statically linked, not stripped

----------------------------------------
Libraries
----------------------------------------
- get third-party library by "go get -u github.com/eiannone/keyboard"

----------------------------------------
Debugging
----------------------------------------
- debugging works out of the box in VSCode by "Run an Debug"
    - default Go debugger is dlv ("delve")
- BUT, for console applications there have to be two files configured (that user inputs can be debugged)
    - .vscode/launch.json
    - .vscode/tasks.json
- prepaired json files in 20-debugging-console-applications

----------------------------------------
Workspaces
----------------------------------------
- in the "go.work" file the module directories have to be defined
  otherwise the are errors regarding importing packages/modules

----------------------------------------
Golang Conventions
----------------------------------------
- package names
    - all lowercase
    - /packagename/ OR
    - /package-name-with-dashed/
- file names
    - all lowercase
    - source.go OR
    - source_file_with_underscore.go
- function names
    - camelCase for unexported
    - PascalCase for exported
- import rules
    - organize packages in groups, separated by a blank line between each group
    - first own packages, empty line, standard library packages, empty line, third-party packages
        - for example:
        import (
            "23-single-instance-by-process/process"

            "fmt"
            "os"

            "github.com/shirou/gopsutil/process"
        )
- variable names
    - see function names
- constant names
    - see function names
- acronyms and initialisms
    - when used in names, acronyms and initialisms should be all
      UPPERCASE or all lowercase, depending on the context,
      e.g., HTTPClient, jsonParser.

----------------------------------------
Publish package
----------------------------------------
- publish
    - commit changes
    - push changes
    - git tag v0.7.0
    - git push origin â€“tags
    - GOPROXY=proxy.golang.org go list -m github.com/sven-seyfert/gomisc@v0.7.0
- usage
    - go get -u github.com/sven-seyfert/gomisc OR
    - go get github.com/sven-seyfert/gomisc@v0.7.0
- check for tagged version
    - https://proxy.golang.org/github.com/sven-seyfert/gomisc/@latest OR
    - https://proxy.golang.org/github.com/sven-seyfert/gomisc/@v/list OR
    - https://proxy.golang.org/github.com/sven-seyfert/gomisc/@v/v0.7.0.info
- check for documentation
    - https://pkg.go.dev/search?q=sven-seyfert/
    - https://pkg.go.dev/github.com/sven-seyfert/gomisc/

----------------------------------------
Linter "golangci-lint"
----------------------------------------
- download golangci-lint
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
- golangci-lint --version
- run
    - "golangci-lint run ./..." which looks into ".golangci.yml" for settings and run the linter
    - "golangci-lint run ./..." -v which does the same but with verbose output
